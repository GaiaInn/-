练习3：设计一个函数返回给定文件名的后缀名。
def get_suffix(filename,get_dot=False):
    '''
    param filename:文件名
    param get_dot:后缀名是否需要带点#改过
    return:文件的后缀名
    '''
    #纠正
    pos=filename.rfind('.')#也是从0开始数的
    print(pos)
    if 0<pos<len(filename)-1:
        index=pos if get_dot else pos+1#如果要带点，就从点开始取
        return filename[index:]#return相对于if要缩进
    else:#else要和if并齐，且后面的内容要回车
        return ''

get_suffix('a.txt')
   
'''
#原来的错误版本
#缩进不对会很麻烦很麻烦
    if 0<pos<len(filename)+1:#数据大小分析错误，应该是len（）-1
        suffix=filename[pos:]
    else:
        suffix=''
    return suffix
'''  

练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。
def max2(a):
    
    nummax1=a[0]
    nummax2=a[1]
    num2=[nummax1,nummax2]#没有把2个按大小排序
    for i in range(2,len(a)):
        if a[i]>nummax1:
            nummax1=a[i]
    for i in range(2,len(a)):
        if a[i]>nummax2 and a[i]!=nummax1:
            nummax2=a[i]
    return num2
a=[7,5,3,9,2,8]
print(len(a))#返回的是实际的长度6
max2(a)
#上面的这个是错误的
def max2(a):
    m1,m2=(a[0],a[1]) if a[0]>a[1] else (a[1],a[0])
    for index in range(2,len(a)):
        if a[index]>m1:
            m2=m1
            m1=a[index]
            
        elif a[index]>m2:
            m2=a[index]
    return m1,m2
a=[7,5,3,9,2,8]
max2(a)


练习5：计算指定的年月日是这一年的第几天
def cal_days(year,month,day):
    '''
    给定年月日计算改天是该年的第几天
    return：天数
    '''
    m_days=0#要提前定义好
    m_day=[31,28,31,30,31,30,31,31,30,31,30,31] if year%4==0 else [31,29,31,30,31,30,31,31,30,31,30,31]
    for i in range(month-1):  #注意对month要减去1
        m_days=m_days+m_day[i]  #+=可以用于两个数的加减，但是都要提前定义好
        #或者
        m_days+=m_day[i]
        days=m_days+day
    return days
cal_days(2019,11,11)
cal_days(2008,3,1)  #后面这个会把前面那个覆盖掉

练习6：打印杨辉三角。
#这个函数里有嵌套循环，不是很懂
def main():
    num = int(input('Number of rows: '))
    yh = [[]] * num#一排中括号
    for row in range(len(yh)):
        yh[row] = [None] * (row + 1)#空括号不计入长度
        for col in range(len(yh[row])):
            if col == 0 or col == row:
                yh[row][col] = 1
            else:
                yh[row][col] = yh[row - 1][col] + yh[row - 1][col - 1]#第一个[]定位行，第二个再行里定位列
            print(yh[row][col], end='\t')#end语句防止换行
        print()


if __name__ == '__main__':
    main()

综合练习2
"""

《幸运的基督徒》
有15个基督徒和15个非基督徒在海上遇险，为了能让一部分人活下来不得不将其中15个人扔到海里面去，
有个人想了个办法就是大家围成一个圈，由某个人开始从1报数，报到9的人就扔到海里面，
他后面的人接着从1开始报数，报到9的人继续扔到海里面，直到扔掉15个人。由于上帝的保佑，
15个基督徒都幸免于难，问这些人最开始是怎么站的，哪些位置是基督徒哪些位置是非基督徒。

"""
#我的思路是做出9*15的序列，然后定位被删掉的，即为非基督
def main():
    a=[x for x in range(1,31)
    for i in range(1,31):#哪里错了
        if a[i]%9==0:
            b=a
            b[i]=[]
    c=[a,b]
    print(c)
    
def main():
    '''
    函数编写思路：把基督徒和非基督徒分两类，按照平常的从前往后数的思路编程
    被扔进海里的非基督徒在被识别出来之后标记为false，只数true
    你的思路中很麻烦的一点是把30个人做成30个不同的对象，而且多次改动列表数量
    '''
    persons = [True] * 30#直接生成列表
    counter, index, number = 0, 0, 0
    while counter < 15:
        if persons[index]:#判断是不是已识别的非基督徒，若不是，才继续算
            number += 1#从前往后数数
            if number == 9:
                persons[index] = False
                counter += 1#识别出来的非基督徒的个数
                number = 0#重新开始数
        index += 1
        index %= 30#数完最后一个人，再从第一个人开始数
    for person in persons:
        print('基' if person else '非', end='')
        #我的写法
        #print('基' if persons[person]=True else '非'，end='')
if __name__ == '__main__':
    main()
