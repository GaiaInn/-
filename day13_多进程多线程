单进程执行多个命令：
from time import time, sleep
from random import randint

def download_task_time(filename):
    '''函数（）里面要有东西'''
    download_time=randint(5,15)
    sleep(download_time)#要让程序确实停顿，否则主函数里没法有效计时
    print('下载文件%s需要%d秒'%(filename,download_time))

def main():
    start=time()
    file1='setup.exe'
    file2='倾尽天下.mp3'
    download_task_time(file1)
    download_task_time(file2)
    end=time()
    print('一共用了%.2f秒' % (end-start))#f是浮点型，d不是浮点型

if __name__=='__main__':#要加单引号
    main()
    
多进程：
from time import time, sleep
from random import randint
from multiprocessing import Process
from os import getpid  #os模块牵涉到一些操作系统功能，如删除文件，显示路径等

def download_task_time(filename):
    '''函数（）里面要有东西'''
    print('启动下载进程，进程号[%d]'%getpid())
    download_time=randint(5,15)
    sleep(download_time)#要让程序确实停顿，否则主函数里没法有效计时
    print('下载文件%s需要%d秒'%(filename,download_time))

def main():
    start=time()
    p1=Process(target=download_task_time,args=('倾尽天下.mp3',))
    p1.start()
    #上面两行也可以写成
    #Process(target=download_task_time,args=('倾尽天下.mp3',).start()
    p2=Process(target=download_task_time,args=('readme.txt',))
    p2.start()
    p1.join()
    p2.join()
    end=time()
    '''
    Process是一个类，这里我们创建了两个对象p2和p1，
    通过target参数我们传入一个函数来表示进程启动后要执行的代码，
    后面的args是一个元组，它代表了传递给函数的参数
    注意看args的输入格式——*arg=(xx , )*，注意！就是因为这里，一直运行不了！！
    start方法用来启动进程，而join方法表示等待进程执行结束。
    '''
    print('一共耗费%.2f秒'%(end-start))

if __name__ == '__main__':
    main()

#print函数的一点用法
f = open("123.txt", "w")#没有该文件就新建一个
print("love", file = f,flush=True)
'''print 函数将内容写入内存，若指定文件就写入文件，
flush=True就是把写入内容及时刷新，否则在执行f.close()后才将内容写进文件中
注意“file=”后面跟的不是文件名
还有就是，写入中文会乱码，不知道为什么
'''

多个进程之间不能轻易通信，比如：
启动两个进程，一个输出Ping，一个输出Pong，两个进程输出的Ping和Pong加起来一共10个。
即使声明全局变量counter来计数也不行，每个子进程有自己独立的内存空间，这也就意味着两个子进程中各有一个counter变量
因此需要用到multiprocessing模块中的Quene类，它是可以被多个进程共享的队列，底层是通过管道和信号量（semaphore）机制来实现的

使用多线程和多进程的区别
from threading import Thread
把“Process”换成“Thread”
——再就没区别了

#%%
from threading import Thread
from time import sleep
class Account():
##替换的开始
    def __init__(self):
        #我有一个问题是，init里面并没有balance，为什么下面就有了
        self._balance=0

    def deposit(self,money):
        new_balance=self._balance+money
        # 由于多个线程共同执行这一步
        # ‘多个线程得到的账户余额都是初始状态下的0，所以都是0上面做了+1的操作，因此得到了错误的结果。’
        sleep(0.01)
        self._balance=new_balance
        # 上面三行模拟受理存款业务需要0.01秒的时间
        '''
        self._balance+=money
        这是我写的版本，不存在多线程下转账数目不足的问题
                '''
##替换的结束
****
    def __init__(self):
        self._balance=0
        self._lock=Lock()
    def deposit(self,money):
        self._lock.acquire()
        try:
            new_balance = self._balance + money
            sleep(0.01)
            self._balance = new_balance
        finally:
            self._lock.release()
#说明，我们可以通过“锁”来保护“临界资源”，
#只有获得“锁”的线程才能访问“临界资源”，而其他没有得到“锁”的线程只能被阻塞起来，
#直到获得“锁”的线程释放了“锁”，其他线程才有机会获得“锁”，
#还要记得在初始项中加载threading模块下的Lock函数
****
                
    @property
    def balance(self):
        return self._balance
        #return Account._balance#错误的版本
        
class AddMoneyThread(Thread):
    def __init__(self,account,money):
        super().__init__()
        #super.__init__()##错误的版本
        self._account=account
        self._money=money

    def run(self):
        #方法run应该是调用类时可以自动运行的一个
        self._account.deposit(self._money)

def main():
    acount=Account()
    threads=[]
    for _ in range(100):
        t=AddMoneyThread(acount,1)
        #由类AddMoneyThread创建的对象，返回值（不知道是嘛，大概）标记了该对象的某些特征
        threads.append(t)#threads的作用可能就是为了计数
        t.start()
    for t in threads:
        t.join()#所有线程都开始后才等待执行结束
    print(threads)
    print('账户余额为：￥%d元'%acount.balance)
if __name__ == '__main__':
    main()

##对计算密集型任务的解决，计算1-10000的加和，将这个任务分解到8个进程中去执行
from multiprocessing import Process, Queue
from random import randint
from time import time


def task_handler(curr_list, result_queue):
    total = 0
    for number in curr_list:
        total += number
    result_queue.put(total)

def main():
    number_list=[x for x in range(1,10001)]
    index=0
    result_queue=Queue()#这步是干嘛的
    processes=[]
    for _ in range(8):
        p=Process(target=task_handler,
                  args=(number_list[index:index+1250], result_queue))
        index+=12500
        processes.append(p)
        #不能写成processes=[processes,p]，会使p丧失其属性
        p.start()
    # 开始记录所有进程执行完成花费的时间
    start = time()
    for p in processes:
        p.join()
    # 合并执行结果
    total = 0
    while not result_queue.empty():
        total += result_queue.get()
    #上面这一步看不懂
    print(total)
    end = time()
    print('Execution time: ', (end - start), 's', sep='')


if __name__ == '__main__':
    main()
    
    
    
